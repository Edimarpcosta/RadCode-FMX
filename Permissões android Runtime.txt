[14/11 16:07] ‪+55 48 9155-0333‬: {$IFDEF ANDROID}
        procedure RequestPermissionCamera;
        procedure RequestPermissionWrite;
        procedure RequestPermissionRead;
        procedure RequestPermissionStorage;
        procedure PermissionCallback(AAndroidPermission: TAndroidPermission; APermissions: TJavaObjectArray<JString>; AGrantResults: TJavaArray<Integer>);
    {$ENDIF}
[14/11 16:08] ‪+55 48 9155-0333‬: formcreate
[14/11 16:08] ‪+55 48 9155-0333‬: {$IF DEFINED(ANDROID)}
        AndroidPermissions.onRequestPermissionsResult:=PermissionCallback;
        {edBuscaBanda.TextSettings.FontColor  := TAlphaColorRec.White;
        edBuscaMusica.TextSettings.FontColor := TAlphaColorRec.White;
        edBuscaInicio.TextSettings.FontColor := TAlphaColorRec.White;}


        //RequestPermissionCamera;
        //RequestPermissionRead;

        {RequestPermissionWrite;

        RequestPermissionStorage;}

    {$ENDIF}
[14/11 16:08] ‪+55 48 9155-0333‬: {$IFDEF ANDROID}

procedure TfrPrincipal.PermissionCallback(
  AAndroidPermission: TAndroidPermission;
  APermissions: TJavaObjectArray<JString>; AGrantResults: TJavaArray<Integer>);
begin
    case AAndroidPermission of
    apCAMERA:
    begin
      // If request is cancelled, the result arrays are empty.
      if (AGrantResults.Length > 0 ) and (AGrantResults[0]=TJPackageManager.JavaClass.PERMISSION_GRANTED) then
      begin
        // permission was granted, yay! Do the
        // contacts-related task you need to do.
      end
      else
      begin
        // permission denied, boo! Disable the
        // functionality that depends on this permission
      end;

    end;

    {apWRITE_EXTERNAL_STORAGE:
    begin
      if (AGrantResults.Length > 0 ) and (AGrantResults[0]=TJPackageManager.JavaClass.PERMISSION_GRANTED) then
      begin
        // permission was granted, yay! Do the
        // contacts-related task you need to do.
      end
      else
      begin
        // permission denied, boo! Disable the
        // functionality that depends on this permission
      end;
    end;

    apREAD_EXTERNAL_STORAGE:
    begin
      if (AGrantResults.Length > 0 ) and (AGrantResults[0]=TJPackageManager.JavaClass.PERMISSION_GRANTED) then
      begin
        // permission was granted, yay! Do the
        // contacts-related task you need to do.
      end
      else
      begin
        // permission denied, boo! Disable the
        // functionality that depends on this permission
      end;
    end;

    apSTORAGE:
    begin
      if (AGrantResults.Length > 0 ) and (AGrantResults[0]=TJPackageManager.JavaClass.PERMISSION_GRANTED) then
      begin
        // permission was granted, yay! Do the
        // contacts-related task you need to do.
      end
      else
      begin
        // permission denied, boo! Disable the
        // functionality that depends on this permission
      end;

    end;}


    // other 'case' lines to check for other
    // permissions this app might request
  end;
end;

procedure TfrPrincipal.RequestPermissionCamera;
begin
if (AndroidPermissions.checkSelfPermission(apCAMERA)<>TJPackageManager.JavaClass.PERMISSION_GRANTED ) then
  begin
    // Should we show an explanation?
    if (AndroidPermissions.shouldShowRequestPermissionRationale(apCAMERA)) then
    begin
      // Show an expanation to the user *asynchronously* -- don't block
      // this thread waiting for the user's response! After the user
      // sees the explanation, try again to request the permission.
    end
    else
    begin
      // No explanation needed, we can request the permission.
      AndroidPermissions.requestPermissions(apCAMERA);
    end;

  end;
end;

procedure TfrPrincipal.RequestPermissionRead;
begin
if (AndroidPermissions.checkSelfPermission(apREAD_EXTERNAL_STORAGE)<>TJPackageManager.JavaClass.PERMISSION_GRANTED ) then
  begin
    // Should we show an explanation?
    if (AndroidPermissions.shouldShowRequestPermissionRationale(apREAD_EXTERNAL_STORAGE)) then
    begin
      // Show an expanation to the user *asynchronously* -- don't block
      // this thread waiting for the user's response! After the user
      // sees the explanation, try again to request the permission.
    end
    else
    begin
      // No explanation needed, we can request the permission.
      AndroidPermissions.requestPermissions(apREAD_EXTERNAL_STORAGE);
    end;

  end;
end;

procedure TfrPrincipal.RequestPermissionStorage;
begin
if (AndroidPermissions.checkSelfPermission(apREAD_EXTERNAL_STORAGE)<>TJPackageManager.JavaClass.PERMISSION_GRANTED ) then
  begin
    // Should we show an explanation?
    if (AndroidPermissions.shouldShowRequestPermissionRationale(apREAD_EXTERNAL_STORAGE)) then
    begin
      // Show an expanation to the user *asynchronously* -- don't block
      // this thread waiting for the user's response! After the user
      // sees the explanation, try again to request the permission.
    end
    else
    begin
      // No explanation needed, we can request the permission.
      AndroidPermissions.requestPermissions(apREAD_EXTERNAL_STORAGE);
    end;

  end;
end;


procedure TfrPrincipal.RequestPermissionWrite;
begin
if (AndroidPermissions.checkSelfPermission(apWRITE_EXTERNAL_STORAGE)<>TJPackageManager.JavaClass.PERMISSION_GRANTED ) then
  begin
    // Should we show an explanation?
    if (AndroidPermissions.shouldShowRequestPermissionRationale(apWRITE_EXTERNAL_STORAGE)) then
    begin
      // Show an expanation to the user *asynchronously* -- don't block
      // this thread waiting for the user's response! After the user
      // sees the explanation, try again to request the permission.
    end
    else
    begin
      // No explanation needed, we can request the permission.
      AndroidPermissions.requestPermissions(apWRITE_EXTERNAL_STORAGE);
    end;

  end;
end;
{$ENDIF}